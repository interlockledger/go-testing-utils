/*
 * BSD 3-Clause License
 *
 * Copyright (c) 2022, InterlockLedger Network
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package testbinary

import (
	crand "crypto/rand"
	"encoding/binary"
	"math/rand"
	"strings"
	"sync/atomic"
	"unicode"
)

var (
	// The current value of the random seed.
	sharedSeed int64
)

func init() {
	// Initialize the seed.
	buff := make([]byte, 8)
	crand.Read(buff)
	sharedSeed = int64(binary.BigEndian.Uint64(buff))
}

/*
Returns the next seed used by this library to create initialize PRNG for testing.
Each call will increment the seed by 1 atomically.

It initial value is the generated by a cryptographically random generator in the
system during the initialization of the library.
*/
func NextSeed() int64 {
	return atomic.AddInt64(&sharedSeed, 1)
}

// Returns a new random generator using the next seed.
func NewSeededRandom() *rand.Rand {
	return rand.New(rand.NewSource(NextSeed()))
}

/*
Fills the given byte array with random values using the specified seed. This
ensures that the returned value is always the same if the seed is the same.

It returns buff itself.
*/
func FillRandomWithSeed(buff []byte, seed int64) []byte {
	if len(buff) > 0 {
		r := rand.New(rand.NewSource(seed))
		for i := 0; i < len(buff); i++ {
			buff[i] = byte(r.Int())
		}
	}
	return buff
}

/*
Fills the given byte array with random values using next seed. This will make
the returned value more or less unpredictable.

It returns buff itself.
*/
func FillRandom(buff []byte) []byte {
	FillRandomWithSeed(buff, NextSeed())
	return buff
}

/*
Fills the given byte array with a sequence of numbers starting from 0.

It returns buff itself.
*/
func FillSeq(buff []byte) []byte {
	return FillSeqCustom(buff, 0)
}

/*
Fills the given byte array with a sequence of numbers starting from the given
value.

It returns buff itself.
*/
func FillSeqCustom(buff []byte, start int) []byte {
	for i := 0; i < len(buff); i++ {
		buff[i] = byte(start)
		start++
	}
	return buff
}

/*
Generates a valid random string with a given size. Only characters that the
standard function unicode.IsGraphic() returns true are elegible to compose the
string.
*/
func NewRandomString(length int) string {
	var sb strings.Builder
	r := NewSeededRandom()
	for i := 0; i < length; i++ {
		c := rune(r.Int() & 0x1FFFFF)
		for ; !unicode.IsGraphic(c); c = rune(r.Int() & 0x1FFFFF) {
		}
		sb.WriteRune(c)
	}
	return sb.String()
}
